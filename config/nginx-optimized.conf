# High-Performance NGINX RTMP with GPU Acceleration
worker_processes auto;
worker_cpu_affinity auto;
worker_rlimit_nofile 65535;

# Performance optimizations
events {
    worker_connections 8192;
    use epoll;
    multi_accept on;
}

# Error logging
error_log /var/log/nginx/error.log warn;

http {
    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 1000;
    
    # Compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1000;
    gzip_types text/plain application/json;
    
    # Stats endpoint
    server {
        listen 8080;
        
        location /stat {
            rtmp_stat all;
            rtmp_stat_stylesheet stat.xsl;
            add_header Access-Control-Allow-Origin *;
        }
        
        location /stat.xsl {
            root /usr/share/nginx/html;
        }
        
        # Live streams status API
        location /api/streams {
            add_header Content-Type application/json;
            add_header Access-Control-Allow-Origin *;
            return 200 '{"status":"active","streams":[]}';
        }
    }
}

rtmp {
    server {
        listen 1935;
        listen [::]:1935 ipv6only=on;
        
        # Increase buffer sizes for high bitrate streams
        chunk_size 8192;
        max_streams 64;
        
        # Live streaming application
        application live {
            live on;
            record off;
            
            # Allow publishing from any IP (adjust for security)
            allow publish all;
            allow play all;
            
            # GPU-accelerated transcoding (requires FFmpeg with GPU support)
            # Uncomment and modify based on your GPU:
            
            # NVIDIA GPU transcoding
            exec_push ffmpeg -re -i rtmp://localhost:1935/live/$name
                -c:v h264_nvenc -preset p4 -tune ll -b:v 6000k -maxrate 6500k -bufsize 13000k -g 60 -keyint_min 60
                -c:a aac -b:a 128k -ar 44100 -f flv rtmp://localhost:1935/transcoded/$name_high
                
                -c:v h264_nvenc -preset p4 -tune ll -b:v 3000k -maxrate 3250k -bufsize 6500k -s 1280x720 -g 60 -keyint_min 60
                -c:a aac -b:a 96k -ar 44100 -f flv rtmp://localhost:1935/transcoded/$name_med
                
                -c:v h264_nvenc -preset p4 -tune ll -b:v 1000k -maxrate 1100k -bufsize 2200k -s 854x480 -g 60 -keyint_min 60
                -c:a aac -b:a 64k -ar 44100 -f flv rtmp://localhost:1935/transcoded/$name_low;
            
            # Intel QuickSync GPU transcoding (alternative)
            # exec_push ffmpeg -re -i rtmp://localhost:1935/live/$name
            #     -c:v h264_qsv -preset medium -b:v 6000k -maxrate 6500k -bufsize 13000k -g 60
            #     -c:a aac -b:a 128k -ar 44100 -f flv rtmp://localhost:1935/transcoded/$name_high;
            
            # Forward to SRT server for SRTLA output
            exec_push ffmpeg -re -i rtmp://localhost:1935/live/$name
                -c copy -f mpegts srt://192.168.50.194:8177?streamid=publish/stream/$name;
                
            # HLS output for web players
            hls on;
            hls_path /tmp/hls;
            hls_fragment 2s;
            hls_playlist_length 10s;
            hls_nested on;
            hls_cleanup on;
            
            # Recording (optional)
            # record all;
            # record_path /recordings;
            # record_suffix .mp4;
            # record_unique on;
        }
        
        # Transcoded streams
        application transcoded {
            live on;
            record off;
            allow play all;
            deny publish all;
        }
        
        # Playback application
        application playback {
            live on;
            play /recordings;
        }
    }
}

# Stream status
rtmp_auto_push on;
rtmp_auto_push_reconnect 1s;